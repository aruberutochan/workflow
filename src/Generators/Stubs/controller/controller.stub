<?php

namespace $NAMESPACE$;

use Illuminate\Http\Request;
use Prettus\Validator\Exceptions\ValidatorException;
use App\Http\Controllers\Controller;
use $APPNAME$\Http\Requests\$NAME$CreateRequest;
use $APPNAME$\Http\Requests\$NAME$UpdateRequest;
use $APPNAME$\Http\Resources\$NAME$Resource;
use $APPNAME$\Http\Resources\$NAME$CollectionResource;
use $APPNAME$\Services\$SERVICE$;
use $APPNAME$\Validators\$VALIDATOR$;


/**
 * Class $CONTROLLER$.
 *
 * @package $NAMESPACE$
 */
class $CONTROLLER$ extends Controller
{
    /**
     * @var $NAME$Service
     */
    protected $service;

    /**
     * $CONTROLLER$ constructor.
     *
     * @param $NAME$Service $service
     * @param $NAME$Validator $validator
     */
    public function __construct($NAME$Service $service)
    {
        $this->service = $service;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $$PLURAL$ = $this->service->getAll();

        if (request()->wantsJson()) {

            // return response()->json([
            //     'data' => $games,
            // ]);

            return new $NAME$CollectionResource($$PLURAL$ );
        }

        return view('$PLURAL$.index', compact('$PLURAL$'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  $NAME$CreateRequest $request
     *
     * @return \Illuminate\Http\Response
     *
     * @throws \Prettus\Validator\Exceptions\ValidatorException
     */
    public function store($NAME$CreateRequest $request)
    {

        $$SINGULAR$ = $this->service->create($request);

        if(is_a($$SINGULAR$, ValidatorException)) {
            $e = $$SINGULAR$;
            if ($request->wantsJson()) {
                return response()->json([
                    'error'   => true,
                    'message' => $e->getMessageBag()
                ]);
            }

            return redirect()->back()->withErrors($e->getMessageBag())->withInput();
        } else {
            $response = [
                'message' => '$NAME$ created.',
                'data'    => $$SINGULAR$->toArray(),
            ];

            if ($request->wantsJson()) {

                return response()->json($response);
            }

            return redirect()->back()->with('message', $response['message']);

        }

    }

    /**
     * Display the specified resource.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $$SINGULAR$ = $this->service->get($id);

        if (request()->wantsJson()) {
            return new $NAME$Resource($$SINGULAR$ );
        }

        return view('$PLURAL$.show', compact('$SINGULAR$'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $$SINGULAR$ = $this->service->get($id);

        return view('$PLURAL$.edit', compact('$SINGULAR$'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  $NAME$UpdateRequest $request
     * @param  string            $id
     *
     * @return Response
     *
     * @throws \Prettus\Validator\Exceptions\ValidatorException
     */
    public function update($NAME$UpdateRequest $request, $id)
    {
        try {

            $$SINGULAR$ = $this->service->update($request, $id);

            $response = [
                'message' => '$NAME$ updated.',
                'data'    => $$SINGULAR$->toArray(),
            ];

            if ($request->wantsJson()) {

                return response()->json($response);
            }

            return redirect()->back()->with('message', $response['message']);
        } catch (ValidatorException $e) {

            if ($request->wantsJson()) {

                return response()->json([
                    'error'   => true,
                    'message' => $e->getMessageBag()
                ]);
            }

            return redirect()->back()->withErrors($e->getMessageBag())->withInput();
        }
    }


    /**
     * Remove the specified resource from storage.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $deleted = $this->service->delete($id);

        if (request()->wantsJson()) {

            return response()->json([
                'message' => '$NAME$ deleted.',
                'deleted' => $deleted,
            ]);
        }

        return redirect()->back()->with('message', '$NAME$ deleted.');
    }
}
