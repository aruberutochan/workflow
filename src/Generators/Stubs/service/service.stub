<?php

namespace $NAMESPACE$;

use Illuminate\Http\Request;
use Prettus\Validator\Contracts\ValidatorInterface;
use $APPNAME$\Http\Requests\$NAME$CreateRequest;
use $APPNAME$\Http\Requests\$NAME$UpdateRequest;
use $APPNAME$\Repositories\$REPOSITORY$;
use $APPNAME$\Validators\$VALIDATOR$;

/**
 * Class $SERVICE$.
 *
 * @package $NAMESPACE$
 */
class $SERVICE$ extends AruAbstractService
{
    /**
     * @var $NAME$Repository
     */
    protected $repository;

    /**
     * @var $NAME$Validator
     */
    protected $validator;

    /**
     * $SERVICE$Service constructor.
     *
     * @param $NAME$Repository $repository
     * @param $NAME$Validator $validator
     */
    public function __construct($NAME$Repository $repository, $NAME$Validator $validator)
    {
        $this->repository = $repository;
        $this->validator  = $validator;
    }

    /**
     * Get all $PLURAL$
     *
     * @return Collection
     */
    public function getAll()
    {
        $this->repository->pushCriteria(app('Prettus\Repository\Criteria\RequestCriteria'));

        return $this->repository->all();

    }

    public function create($NAME$CreateRequest $request)
    {
        try {

            $this->validator->with($request->all())->passesOrFail(ValidatorInterface::RULE_CREATE);

            return $this->repository->create($request->all());

        } catch (ValidatorException $e) {

            return $e;
        }
    }

    public function show($id)
    {
        return $this->repository->find($id);

    }

    public function edit($id)
    {
        return $this->repository->find($id);

    }

    public function update($NAME$UpdateRequest $request, $id)
    {
        try {

            $this->validator->with($request->all())->passesOrFail(ValidatorInterface::RULE_UPDATE);

            return $this->repository->update($request->all(), $id);

        } catch (ValidatorException $e) {

            return $e;
        }
    }

    public function destroy($id)
    {
        return $this->repository->delete($id);

    }
}
